import streamlit as st
import streamlit.components.v1 as components

# Page settings
st.set_page_config(
    page_title="Go para Concorr√™ncia",
    page_icon="assets/go-icon.png",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "This app generates scripts for data clean rooms!"
    }
)

# Top of the page: title and logo
col1, col2 = st.columns((6, 1))
with col1:
    st.title("Go: A Escolha Inteligente para um Mundo Concorrente")
with col2:
    st.image("assets/golang-goper-logo.png", width=1000)

# Sidebar: logo + links √∫teis
st.sidebar.image("assets/go-logo.png")
st.sidebar.image("assets/GOLANG.png")

# Menu items: (label, url, icon path)
menu_items = [
    ("Documenta√ß√£o oficial", "https://golang.org/doc/", "assets/documentation-gopher.png"),
    ("Tour do Go", "https://tour.golang.org/", "assets/tour-gopher.png"),
    ("Go Playground", "https://play.golang.org/", "assets/playground-gopher.png"),
    ("Pacotes (pkg.go.dev)", "https://pkg.go.dev/", "assets/pacotes-gopher.png"),
    ("Blog oficial do Go", "https://blog.golang.org/", "assets/blog-gopher.png"),
    ("Crie seu mascote", "https://gopherize.me/", "assets/mascote-gopher.png"),
]

st.sidebar.title("Recursos do Go")

for label, url, icon_path in menu_items:
    col1,  col2 = st.sidebar.columns([6, 10])
    
    with col1:
        st.image(icon_path, width=100)
    
    with col2:
        components.html(f"""
        <div style="height: 100px; display: flex; align-items: center;">
            <a href="{url}" target="_blank" style="
                color: white;
                text-decoration: none;
                padding: 8px 16px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 16px;
                display: inline-block;
                font-family: sans-serif
            ">{label}</a>
        </div>
        """, height=100)
        
st.write("""
Explore as abas abaixo para descobrir por que a simplicidade e o poder do modelo de concorr√™ncia do Go o tornam a ferramenta ideal para construir aplica√ß√µes modernas, escal√°veis e de alta performance.
""")

st.markdown("---")
        
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üéØ **Por que Go para Concorr√™ncia?**",
    "üí° **Goroutines: Concorr√™ncia Leve**",
    "üì° **Channels: Comunica√ß√£o Segura**",
    "üé∂ **Orquestra√ß√£o: Select e Sync**",
    "‚öôÔ∏è **O Motor: Runtime do Go**",
    "üåç **Go no Mundo Real & Playground**"
])

with tab1:
    st.header("üéØ A Filosofia de Concorr√™ncia do Go")
    st.markdown("""
    Em um mundo onde aplica√ß√µes precisam processar milhares de requisi√ß√µes simultaneamente, a concorr√™ncia √© fundamental. Muitas linguagens abordam a concorr√™ncia com mecanismos complexos e propensos a erros, como threads e locks manuais.

    Go nasceu com uma filosofia diferente, inspirada no conceito de **CSP (Communicating Sequential Processes)**. A ideia central √©:

    > **"N√£o comunique compartilhando mem√≥ria; em vez disso, compartilhe mem√≥ria comunicando."**

    Isso significa que, em vez de m√∫ltiplas threads disputando o acesso a uma mesma vari√°vel (o que exige `locks` e pode levar a *race conditions*), as Goroutines enviam mensagens umas √†s outras atrav√©s de canais (`channels`). Esse modelo torna o c√≥digo:

    -   **Mais simples de ler e raciocinar**: A l√≥gica de comunica√ß√£o √© expl√≠cita.
    -   **Mais seguro**: Reduz drasticamente a chance de bugs de concorr√™ncia.
    -   **Altamente perform√°tico**: O runtime do Go foi projetado do zero para gerenciar milh√µes de Goroutines com efici√™ncia.

    Go n√£o adicionou concorr√™ncia como um recurso, **Go foi projetado em torno da concorr√™ncia**.
    """)
    
with tab2:
    st.header("üí° Goroutines: Concorr√™ncia Leve e Intuitiva")
    st.markdown("""
    **Goroutines** s√£o a unidade fundamental de concorr√™ncia em Go. Pense nelas como threads, mas com um custo ridiculamente baixo.

    | Caracter√≠stica | Threads Tradicionais (SO) | Goroutines (Go) |
    | :--- | :--- | :--- |
    | **Custo de Cria√ß√£o** | Alto (consome muita mem√≥ria e tempo de CPU) | Baix√≠ssimo (poucos KB de stack inicial) |
    | **Gerenciamento** | Gerenciadas pelo Kernel do SO (troca de contexto lenta) | Gerenciadas pelo Runtime do Go (troca de contexto r√°pida) |
    | **Quantidade** | Dezenas ou centenas | Centenas de milhares ou at√© milh√µes |

    #### Como usar?
    √â trivial. Basta usar a palavra-chave `go` antes de uma chamada de fun√ß√£o. A fun√ß√£o passar√° a ser executada em segundo plano, de forma concorrente, sem bloquear a execu√ß√£o principal.
    """)

    st.subheader("Exemplo: Disparando m√∫ltiplas tarefas")
    st.code("""
package main

import (
	"fmt"
	"time"
)

func tarefa(id int) {
	fmt.Printf("Iniciando tarefa %d...\\n", id)
	time.Sleep(2 * time.Second) // Simula um trabalho pesado
	fmt.Printf("Tarefa %d conclu√≠da!\\n", id)
}

func main() {
	// Dispara 3 goroutines concorrentemente
	go tarefa(1)
	go tarefa(2)
	go tarefa(3)

	// Espera um pouco para que as goroutines terminem antes do programa principal encerrar
	time.Sleep(3 * time.Second)
	fmt.Println("Programa principal encerrado.")
}
""", language='go')
    st.markdown("Neste exemplo, as tr√™s tarefas rodam simultaneamente. O programa n√£o espera a primeira terminar para iniciar a segunda.")

with tab3:
    st.header("üì° Channels: Comunica√ß√£o Segura e Sincronizada")
    st.markdown("""
    Se Goroutines s√£o os "trabalhadores", **Channels** s√£o as "esteiras" por onde eles trocam informa√ß√µes de forma segura. Um Channel √© um canal tipado, o que significa que voc√™ s√≥ pode enviar e receber dados de um tipo espec√≠fico, garantindo seguran√ßa de tipos (*type safety*).

    Opera√ß√µes com channels s√£o, por padr√£o, **bloqueantes**:
    -   **Envio (`ch <- valor`)**: Bloqueia a Goroutine at√© que outra Goroutine esteja pronta para receber o valor.
    -   **Recebimento (`<-ch`)**: Bloqueia a Goroutine at√© que um valor seja enviado para o canal.

    Esse comportamento bloqueante √© a chave para a **sincroniza√ß√£o autom√°tica** entre Goroutines, eliminando a necessidade de `locks` manuais na maioria dos casos.

    #### Exemplo: Ping-Pong entre Goroutines
    """)
    st.code("""
package main

import (
	"fmt"
	"time"
)

// pinger envia uma mensagem e espera uma resposta
func pinger(pings chan<- string, msg string) {
	pings <- msg
}

// ponger recebe uma mensagem e a imprime
func ponger(pings <-chan string, pongs chan<- string) {
	msg := <-pings // Recebe de pings
	fmt.Println(msg, "recebido!")
	time.Sleep(1 * time.Second)
	pongs <- "Pong" // Envia para pongs
}

func main() {
	pings := make(chan string, 1) // Canal para pings
	pongs := make(chan string, 1) // Canal para pongs

	go pinger(pings, "Ping")
	go ponger(pings, pongs)

	fmt.Println("Esperando a resposta...")
	resposta := <-pongs // Recebe a resposta final
	fmt.Println("Resposta recebida:", resposta)
}
""", language='go')
    st.markdown("Este exemplo mostra como os `channels` coordenam o fluxo de execu√ß√£o entre duas Goroutines de forma elegante e segura.")

with tab4:
    st.header("üé∂ Orquestra√ß√£o Avan√ßada: `select` e `sync`")
    st.markdown("""
    Go oferece ferramentas poderosas para gerenciar cen√°rios de concorr√™ncia mais complexos.
    """)

    st.subheader("`select`: Esperando por M√∫ltiplos Canais")
    st.markdown("""
    O `select` permite que uma Goroutine espere por opera√ß√µes em m√∫ltiplos canais simultaneamente. √â como um `switch` para `channels`.

    - Ele bloqueia at√© que um de seus `cases` (uma opera√ß√£o de canal) possa ser executado.
    - Se m√∫ltiplos `cases` estiverem prontos, ele escolhe um aleatoriamente.
    - Um `case default` pode ser usado para evitar o bloqueio.
    """)
    st.code("""
package main

import (
	"fmt"
	"time"
)

func main() {
	c1 := make(chan string)
	c2 := make(chan string)

	go func() {
		time.Sleep(1 * time.Second)
		c1 <- "resultado um"
	}()
	go func() {
		time.Sleep(2 * time.Second)
		c2 <- "resultado dois"
	}()

	// Espera por dois resultados, mas reage ao primeiro que chegar
	for i := 0; i < 2; i++ {
		select {
		case msg1 := <-c1:
			fmt.Println("Recebido:", msg1)
		case msg2 := <-c2:
			fmt.Println("Recebido:", msg2)
		}
	}
}
""", language='go')

    st.subheader("Pacote `sync`: Quando a Comunica√ß√£o n√£o √© Suficiente")
    st.markdown("""
    Embora a comunica√ß√£o via `channels` seja o ideal, √†s vezes voc√™ precisa de mecanismos de sincroniza√ß√£o mais tradicionais. O pacote `sync` oferece:

    -   **`sync.WaitGroup`**: Para esperar que um grupo de Goroutines termine sua execu√ß√£o. √â uma forma mais robusta de "esperar" do que o `time.Sleep()` que usamos nos primeiros exemplos.
    -   **`sync.Mutex`**: Um `lock` de exclus√£o m√∫tua para proteger o acesso a uma vari√°vel quando v√°rias Goroutines precisam modific√°-la diretamente.
    """)
    st.code("""
package main

import (
	"fmt"
	"sync"
	"time"
)

func worker(id int, wg *sync.WaitGroup) {
	defer wg.Done() // Decrementa o contador do WaitGroup quando a fun√ß√£o retorna
	fmt.Printf("Worker %d come√ßando\\n", id)
	time.Sleep(time.Second)
	fmt.Printf("Worker %d terminando\\n", id)
}

func main() {
	var wg sync.WaitGroup // Cria um WaitGroup

	for i := 1; i <= 3; i++ {
		wg.Add(1) // Incrementa o contador para cada Goroutine
		go worker(i, &wg)
	}

	wg.Wait() // Bloqueia aqui at√© que o contador seja zero

	fmt.Println("Todos os workers terminaram.")
}
""", language='go')

with tab5:
    st.header("‚öôÔ∏è O Motor por Tr√°s de Tudo: O Runtime do Go")
    st.markdown("""
    A efici√™ncia do modelo de concorr√™ncia do Go n√£o √© m√°gica, √© engenharia. O **Runtime do Go** √© um ambiente de execu√ß√£o sofisticado que gerencia recursos de forma inteligente.

    #### O Agendador (Scheduler) M:P:G
    O cora√ß√£o do runtime √© seu agendador, que implementa um modelo conhecido como **M:P:G**:
    -   **M (Machine)**: Uma thread do sistema operacional.
    -   **P (Processor)**: Um contexto para execu√ß√£o, representa um recurso de processamento.
    -   **G (Goroutine)**: A sua Goroutine.

    

    O agendador do Go distribui as Goroutines (G) para serem executadas nos processadores l√≥gicos (P), que por sua vez s√£o executados pelas threads do SO (M).

    **Por que isso √© genial?**
    1.  **Agendamento Cooperativo**: Se uma Goroutine faz uma chamada bloqueante (como ler um arquivo ou uma requisi√ß√£o de rede), o agendador a retira da thread do SO e coloca outra Goroutine para executar no lugar. A thread do SO nunca fica ociosa.
    2.  **Efici√™ncia M√°xima**: Ele utiliza todas as CPUs dispon√≠veis, gerenciando um n√∫mero massivo de Goroutines com um n√∫mero pequeno de threads do SO, o que minimiza a sobrecarga do sistema operacional.

    #### Garbage Collector (Coletor de Lixo)
    Go possui um coletor de lixo concorrente e de baixa lat√™ncia. Ele foi projetado para trabalhar em paralelo com o seu c√≥digo, minimizando as pausas ("stop-the-world") e garantindo que sua aplica√ß√£o de alta performance continue responsiva.
    """)

with tab6:
    st.header("üåç Go no Mundo Real: Cases de Sucesso")
    st.markdown("""
    A simplicidade e performance da concorr√™ncia em Go n√£o s√£o apenas te√≥ricas. Grandes empresas confiam em Go para construir sistemas cr√≠ticos e de larga escala:

    -   **Uber**: Utiliza Go para seus servi√ßos de geolocaliza√ß√£o e processamento de dados de alta vaz√£o.
    -   **Twitch**: Usa Go para partes de seu sistema de chat, que serve milh√µes de usu√°rios concorrentes.
    -   **Google**: Criadora da linguagem, usa Go em in√∫meros sistemas internos, incluindo partes do YouTube e da infraestrutura da nuvem.
    -   **Mercado Livre**: Empregou Go para reescrever seus principais servi√ßos de backend, melhorando a performance e a escalabilidade.
    -   **Dropbox**: Migrou partes cr√≠ticas de sua infraestrutura de Python para Go para obter melhor concorr√™ncia e uso de mem√≥ria.

    Essas empresas escolheram Go porque ele entrega o que promete: **performance, simplicidade e concorr√™ncia de primeira classe.**
    """)

    st.markdown("---")

    st.header("üéÆ Experimente Agora no Playground!")
    st.write("Nada melhor do que ver com os pr√≥prios olhos. Use o playground oficial do Go abaixo para testar os exemplos das abas anteriores ou escrever seus pr√≥prios c√≥digos concorrentes. **Seja curioso!**")

    # Incorpora o Go Playground usando um iframe
    st.components.v1.iframe("https://go.dev/play/?v=gotip", height=600, scrolling=True)
